services:
  aerospike:
    image: {{ AEROSPIKE_IMAGE }}
    volumes:
      - {{ BK_DIR }}/aerospike-config:/opt/aerospike/etc
      - {{ BK_DATA_DIR }}/aerospike:/opt/aerospike/data
    command: ["--config-file", "/opt/aerospike/etc/aerospike.conf"]
    healthcheck:
      test: ["CMD-SHELL", "asinfo -h 127.0.0.1 -p {{ AEROSPIKE_PORT }} -v 'build' || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    ports:
      - 127.0.0.1:{{ AEROSPIKE_PORT }}:{{ AEROSPIKE_PORT }}
    networks:
      - ackinacki-net

  node{{ NODE_ID }}:
    image: {{ NODE_IMAGE }}
    restart: no
    environment:
      RUST_LOG: trace
      EXTERNAL_STATE_SHARE_LOCAL_BASE_DIR: /share
      BIND: 0.0.0.0:{{ BIND_PORT }}
      API_ADDR: 0.0.0.0:{{ BIND_API_PORT }}
      MESSAGE_ROUTER: 0.0.0.0:{{ BIND_MESSAGE_ROUTER_PORT }}
      GOSSIP_SEEDS: {{ GOSSIP_SEEDS | join(',') }}
      AEROSPIKE_SOCKET_ADDR: 127.0.0.1:{{ AEROSPIKE_PORT }}
      MIN_TIME_BETWEEN_STATE_PUBLISH_DIRECTIVES: 600s
      NODE_JOINING_TIMEOUT: 60s
      NODE_ID: {{ NODE_ID }}
      NODE_ADVERTISE_ADDR: {{ HOST_PUBLIC_IP }}:{{ BIND_PORT }}
      GOSSIP_ADVERTISE_ADDR: {{ HOST_PUBLIC_IP }}:{{ BIND_GOSSIP_PORT }}
      API_ADVERTISE_ADDR: http://{{ HOST_PUBLIC_IP }}:{{ BIND_API_PORT }}
      GOSSIP_LISTEN_ADDR: 0.0.0.0:{{ BIND_GOSSIP_PORT }}
      BLOCK_MANAGER_LISTEN_ADDR: 0.0.0.0:{{ BLOCK_MANAGER_PORT }}
{% set otel_node_id = (NODE_ID | string)[:6] %}{% if NODE_GROUP_ID is defined and NODE_GROUP_ID %}{% set otel_node_id = NODE_GROUP_ID ~ '-' ~ otel_node_id %}{% endif %}
      OTEL_RESOURCE_ATTRIBUTES: node={{ otel_node_id }},service.namespace={{ NETWORK_NAME }},service.instance.id={{ otel_node_id }},host.name={{ OTEL_MY_HOST_NAME | default(inventory_hostname) | default(ansible_host) }}
{% if OTEL_COLLECTOR is defined and OTEL_SERVICE_NAME is defined and OTEL_COLLECTOR and OTEL_SERVICE_NAME %}
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: {{ OTEL_COLLECTOR }}
      OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: {{ OTEL_COLLECTOR_PROTO | default('grpc') }}
      OTEL_SERVICE_NAME: {{ OTEL_SERVICE_NAME }}
{% endif %}
    entrypoint: []
    init: true
    command:
      - bash
      - -c
      - >
        node-helper config
        -c acki-nacki.conf.yaml -d
        --blockchain-config=/bk-configs/blockchain.conf.json
        --network-my-ed-key-path=/bk-configs/{{ NODE_OWNER_KEY | basename }}
        --keys-path=/bk-configs/block_keeper{{ NODE_ID }}_bls.keys.json
        --block-keeper-seed-path=/bk-configs/block_keeper{{ NODE_ID }}_bls.keys.json
        --zerostate-path=/bk-configs/zerostate
        --parallelization-level 20
        --chitchat-cluster-id "{{ NETWORK_NAME }}"
        --shared-state-max-download-tries 30
        --thread-count-soft-limit {{ THREAD_COUNT_SOFT_LIMIT }}
        --block-keeper-epoch-code-hash {{ CODE_HASH }}
        && cat acki-nacki.conf.yaml
        && node -c acki-nacki.conf.yaml >> /logsdir/node.log 2>&1
    volumes:
      - {{ BK_DATA_DIR }}/share:/share
      - {{ BK_DATA_DIR }}/workdir:/workdir/data
      - {{ BK_DIR }}/bk-configs:/bk-configs
      - {{ BK_DIR }}/bk-binaries:/workdir/config
      - {{ BK_LOGS_DIR }}:/logsdir
    network_mode: "host"
    depends_on:
      aerospike:
        condition: service_healthy

  staking{{ NODE_ID }}:
    image: {{ STAKING_IMAGE }}
    restart: unless-stopped
    entrypoint: []
    pid: service:node{{ NODE_ID }}
    command:
      - /bin/bash
      - -c
      - >
        tvm-cli config -g --url {{ TVM_ENDPOINT }}
        && exec /staking/staking.sh -l /staking/logs/staking.log -d {{ STAKING_TIME | default(600) }} /staking/configs/{{ NODE_OWNER_KEY | basename }} /staking/configs/block_keeper{{ NODE_ID }}_bls.keys.json {{ HOST_PUBLIC_IP }}
    volumes:
      - {{ BK_LOGS_DIR }}:/staking/logs
      - {{ BK_DIR }}/bk-configs:/staking/configs
    depends_on:
      - node{{ NODE_ID }}

  logrotate{{ NODE_ID }}:
    image: stakater/logrotate:3.13.0
    restart: unless-stopped
    environment:
      - CRON_SCHEDULE="58 * * * *"
    volumes:
      - {{ BK_LOGS_DIR }}:/logsdir
      - ./logrotate.sh:/logrotate.sh
    command: [ "/bin/bash", "/logrotate.sh" ]
    init: true

networks:
  ackinacki-net:
    name: ackinacki-net
